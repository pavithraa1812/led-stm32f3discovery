
led3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000374  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000508  08000510  00010510  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000508  08000508  00010510  2**0
                  CONTENTS
  4 .ARM          00000000  08000508  08000508  00010510  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000508  08000510  00010510  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000508  08000508  00010508  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800050c  0800050c  0001050c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010510  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000510  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000510  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00010510  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000283  00000000  00000000  00010540  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000000cd  00000000  00000000  000107c3  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000078  00000000  00000000  00010890  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000060  00000000  00000000  00010908  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00000f08  00000000  00000000  00010968  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000004e0  00000000  00000000  00011870  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00003b08  00000000  00000000  00011d50  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00015858  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000013c  00000000  00000000  000158d4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000000 	.word	0x20000000
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080004f0 	.word	0x080004f0

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000004 	.word	0x20000004
 80001d0:	080004f0 	.word	0x080004f0

080001d4 <main>:
void orange();//PE10 and PE14 pin
void green();//PE11 and PE15 pin
void clear();
void delay();
int main()
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	b082      	sub	sp, #8
 80001d8:	af00      	add	r7, sp, #0
		while(1)
		{
			uint32_t *p1=(uint32_t*)0X40021014;
 80001da:	4b0e      	ldr	r3, [pc, #56]	; (8000214 <main+0x40>)
 80001dc:	607b      	str	r3, [r7, #4]
			*p1 |=0X00200000;
 80001de:	687b      	ldr	r3, [r7, #4]
 80001e0:	681b      	ldr	r3, [r3, #0]
 80001e2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80001e6:	687b      	ldr	r3, [r7, #4]
 80001e8:	601a      	str	r2, [r3, #0]
			while(1)
			{
				blue();
 80001ea:	f000 f815 	bl	8000218 <blue>
				delay();
 80001ee:	f000 f91d 	bl	800042c <delay>
				red();
 80001f2:	f000 f84b 	bl	800028c <red>
				delay();
 80001f6:	f000 f919 	bl	800042c <delay>
				orange();
 80001fa:	f000 f881 	bl	8000300 <orange>
				delay();
 80001fe:	f000 f915 	bl	800042c <delay>
				green();
 8000202:	f000 f8b7 	bl	8000374 <green>
				delay();
 8000206:	f000 f911 	bl	800042c <delay>
				clear();
 800020a:	f000 f8ed 	bl	80003e8 <clear>
				delay();
 800020e:	f000 f90d 	bl	800042c <delay>
				blue();
 8000212:	e7ea      	b.n	80001ea <main+0x16>
 8000214:	40021014 	.word	0x40021014

08000218 <blue>:
			}
		}
}
void blue()
{
 8000218:	b580      	push	{r7, lr}
 800021a:	b084      	sub	sp, #16
 800021c:	af00      	add	r7, sp, #0

	uint32_t *p21=(uint32_t*)0X48001000;
 800021e:	4b19      	ldr	r3, [pc, #100]	; (8000284 <blue+0x6c>)
 8000220:	60fb      	str	r3, [r7, #12]
	uint32_t *p31=(uint32_t*)0X48001014;
 8000222:	4b19      	ldr	r3, [pc, #100]	; (8000288 <blue+0x70>)
 8000224:	60bb      	str	r3, [r7, #8]

	uint32_t *p22=(uint32_t*)0X48001000;
 8000226:	4b17      	ldr	r3, [pc, #92]	; (8000284 <blue+0x6c>)
 8000228:	607b      	str	r3, [r7, #4]
	uint32_t *p32=(uint32_t*)0X48001014;
 800022a:	4b17      	ldr	r3, [pc, #92]	; (8000288 <blue+0x70>)
 800022c:	603b      	str	r3, [r7, #0]

	*p21 &=0XFCFFFFFF;
 800022e:	68fb      	ldr	r3, [r7, #12]
 8000230:	681b      	ldr	r3, [r3, #0]
 8000232:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8000236:	68fb      	ldr	r3, [r7, #12]
 8000238:	601a      	str	r2, [r3, #0]
	*p21 |=0X01000000;
 800023a:	68fb      	ldr	r3, [r7, #12]
 800023c:	681b      	ldr	r3, [r3, #0]
 800023e:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8000242:	68fb      	ldr	r3, [r7, #12]
 8000244:	601a      	str	r2, [r3, #0]
	*p31 |=0X1000;
 8000246:	68bb      	ldr	r3, [r7, #8]
 8000248:	681b      	ldr	r3, [r3, #0]
 800024a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800024e:	68bb      	ldr	r3, [r7, #8]
 8000250:	601a      	str	r2, [r3, #0]

	delay();
 8000252:	f000 f8eb 	bl	800042c <delay>

	*p22 &=0XFFFCFFFF;
 8000256:	687b      	ldr	r3, [r7, #4]
 8000258:	681b      	ldr	r3, [r3, #0]
 800025a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800025e:	687b      	ldr	r3, [r7, #4]
 8000260:	601a      	str	r2, [r3, #0]
	*p22 |=0X00010000;
 8000262:	687b      	ldr	r3, [r7, #4]
 8000264:	681b      	ldr	r3, [r3, #0]
 8000266:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800026a:	687b      	ldr	r3, [r7, #4]
 800026c:	601a      	str	r2, [r3, #0]
	*p32 |=0X0100;
 800026e:	683b      	ldr	r3, [r7, #0]
 8000270:	681b      	ldr	r3, [r3, #0]
 8000272:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000276:	683b      	ldr	r3, [r7, #0]
 8000278:	601a      	str	r2, [r3, #0]

}
 800027a:	bf00      	nop
 800027c:	3710      	adds	r7, #16
 800027e:	46bd      	mov	sp, r7
 8000280:	bd80      	pop	{r7, pc}
 8000282:	bf00      	nop
 8000284:	48001000 	.word	0x48001000
 8000288:	48001014 	.word	0x48001014

0800028c <red>:
void red()
{
 800028c:	b580      	push	{r7, lr}
 800028e:	b084      	sub	sp, #16
 8000290:	af00      	add	r7, sp, #0

	uint32_t *p21=(uint32_t*)0X48001000;
 8000292:	4b19      	ldr	r3, [pc, #100]	; (80002f8 <red+0x6c>)
 8000294:	60fb      	str	r3, [r7, #12]
	uint32_t *p31=(uint32_t*)0X48001014;
 8000296:	4b19      	ldr	r3, [pc, #100]	; (80002fc <red+0x70>)
 8000298:	60bb      	str	r3, [r7, #8]

	uint32_t *p22=(uint32_t*)0X48001000;
 800029a:	4b17      	ldr	r3, [pc, #92]	; (80002f8 <red+0x6c>)
 800029c:	607b      	str	r3, [r7, #4]
	uint32_t *p32=(uint32_t*)0X48001014;
 800029e:	4b17      	ldr	r3, [pc, #92]	; (80002fc <red+0x70>)
 80002a0:	603b      	str	r3, [r7, #0]

	*p21 &=0XF3FFFFFF;
 80002a2:	68fb      	ldr	r3, [r7, #12]
 80002a4:	681b      	ldr	r3, [r3, #0]
 80002a6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80002aa:	68fb      	ldr	r3, [r7, #12]
 80002ac:	601a      	str	r2, [r3, #0]
	*p21 |=0X04000000;
 80002ae:	68fb      	ldr	r3, [r7, #12]
 80002b0:	681b      	ldr	r3, [r3, #0]
 80002b2:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 80002b6:	68fb      	ldr	r3, [r7, #12]
 80002b8:	601a      	str	r2, [r3, #0]
	*p31 |=0X2000;
 80002ba:	68bb      	ldr	r3, [r7, #8]
 80002bc:	681b      	ldr	r3, [r3, #0]
 80002be:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80002c2:	68bb      	ldr	r3, [r7, #8]
 80002c4:	601a      	str	r2, [r3, #0]

	delay();
 80002c6:	f000 f8b1 	bl	800042c <delay>

	*p22 &=0XFFF3FFFF;
 80002ca:	687b      	ldr	r3, [r7, #4]
 80002cc:	681b      	ldr	r3, [r3, #0]
 80002ce:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80002d2:	687b      	ldr	r3, [r7, #4]
 80002d4:	601a      	str	r2, [r3, #0]
	*p22 |=0X00040000;
 80002d6:	687b      	ldr	r3, [r7, #4]
 80002d8:	681b      	ldr	r3, [r3, #0]
 80002da:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80002de:	687b      	ldr	r3, [r7, #4]
 80002e0:	601a      	str	r2, [r3, #0]
	*p32 |=0X0200;
 80002e2:	683b      	ldr	r3, [r7, #0]
 80002e4:	681b      	ldr	r3, [r3, #0]
 80002e6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80002ea:	683b      	ldr	r3, [r7, #0]
 80002ec:	601a      	str	r2, [r3, #0]

}
 80002ee:	bf00      	nop
 80002f0:	3710      	adds	r7, #16
 80002f2:	46bd      	mov	sp, r7
 80002f4:	bd80      	pop	{r7, pc}
 80002f6:	bf00      	nop
 80002f8:	48001000 	.word	0x48001000
 80002fc:	48001014 	.word	0x48001014

08000300 <orange>:
void orange()
{
 8000300:	b580      	push	{r7, lr}
 8000302:	b084      	sub	sp, #16
 8000304:	af00      	add	r7, sp, #0

	uint32_t *p21=(uint32_t*)0X48001000;
 8000306:	4b19      	ldr	r3, [pc, #100]	; (800036c <orange+0x6c>)
 8000308:	60fb      	str	r3, [r7, #12]
	uint32_t *p31=(uint32_t*)0X48001014;
 800030a:	4b19      	ldr	r3, [pc, #100]	; (8000370 <orange+0x70>)
 800030c:	60bb      	str	r3, [r7, #8]

	uint32_t *p22=(uint32_t*)0X48001000;
 800030e:	4b17      	ldr	r3, [pc, #92]	; (800036c <orange+0x6c>)
 8000310:	607b      	str	r3, [r7, #4]
	uint32_t *p32=(uint32_t*)0X48001014;
 8000312:	4b17      	ldr	r3, [pc, #92]	; (8000370 <orange+0x70>)
 8000314:	603b      	str	r3, [r7, #0]

	*p21 &=0XCFFFFFFF;
 8000316:	68fb      	ldr	r3, [r7, #12]
 8000318:	681b      	ldr	r3, [r3, #0]
 800031a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800031e:	68fb      	ldr	r3, [r7, #12]
 8000320:	601a      	str	r2, [r3, #0]
	*p21 |=0X10000000;
 8000322:	68fb      	ldr	r3, [r7, #12]
 8000324:	681b      	ldr	r3, [r3, #0]
 8000326:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800032a:	68fb      	ldr	r3, [r7, #12]
 800032c:	601a      	str	r2, [r3, #0]
	*p31 |=0X4000;
 800032e:	68bb      	ldr	r3, [r7, #8]
 8000330:	681b      	ldr	r3, [r3, #0]
 8000332:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8000336:	68bb      	ldr	r3, [r7, #8]
 8000338:	601a      	str	r2, [r3, #0]

	delay();
 800033a:	f000 f877 	bl	800042c <delay>

	*p22 &=0XFFCFFFFF;
 800033e:	687b      	ldr	r3, [r7, #4]
 8000340:	681b      	ldr	r3, [r3, #0]
 8000342:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8000346:	687b      	ldr	r3, [r7, #4]
 8000348:	601a      	str	r2, [r3, #0]
	*p22 |=0X00100000;
 800034a:	687b      	ldr	r3, [r7, #4]
 800034c:	681b      	ldr	r3, [r3, #0]
 800034e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8000352:	687b      	ldr	r3, [r7, #4]
 8000354:	601a      	str	r2, [r3, #0]
	*p32 |=0X0400;
 8000356:	683b      	ldr	r3, [r7, #0]
 8000358:	681b      	ldr	r3, [r3, #0]
 800035a:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800035e:	683b      	ldr	r3, [r7, #0]
 8000360:	601a      	str	r2, [r3, #0]

}
 8000362:	bf00      	nop
 8000364:	3710      	adds	r7, #16
 8000366:	46bd      	mov	sp, r7
 8000368:	bd80      	pop	{r7, pc}
 800036a:	bf00      	nop
 800036c:	48001000 	.word	0x48001000
 8000370:	48001014 	.word	0x48001014

08000374 <green>:
void green()
{
 8000374:	b580      	push	{r7, lr}
 8000376:	b084      	sub	sp, #16
 8000378:	af00      	add	r7, sp, #0
	uint32_t *p21=(uint32_t*)0X48001000;
 800037a:	4b19      	ldr	r3, [pc, #100]	; (80003e0 <green+0x6c>)
 800037c:	60fb      	str	r3, [r7, #12]
	uint32_t *p31=(uint32_t*)0X48001014;
 800037e:	4b19      	ldr	r3, [pc, #100]	; (80003e4 <green+0x70>)
 8000380:	60bb      	str	r3, [r7, #8]

	uint32_t *p22=(uint32_t*)0X48001000;
 8000382:	4b17      	ldr	r3, [pc, #92]	; (80003e0 <green+0x6c>)
 8000384:	607b      	str	r3, [r7, #4]
	uint32_t *p32=(uint32_t*)0X48001014;
 8000386:	4b17      	ldr	r3, [pc, #92]	; (80003e4 <green+0x70>)
 8000388:	603b      	str	r3, [r7, #0]

	*p21 &=0X3FFFFFFF;
 800038a:	68fb      	ldr	r3, [r7, #12]
 800038c:	681b      	ldr	r3, [r3, #0]
 800038e:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8000392:	68fb      	ldr	r3, [r7, #12]
 8000394:	601a      	str	r2, [r3, #0]
	*p21 |=0X40000000;
 8000396:	68fb      	ldr	r3, [r7, #12]
 8000398:	681b      	ldr	r3, [r3, #0]
 800039a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800039e:	68fb      	ldr	r3, [r7, #12]
 80003a0:	601a      	str	r2, [r3, #0]
	*p31 |=0X8000;
 80003a2:	68bb      	ldr	r3, [r7, #8]
 80003a4:	681b      	ldr	r3, [r3, #0]
 80003a6:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 80003aa:	68bb      	ldr	r3, [r7, #8]
 80003ac:	601a      	str	r2, [r3, #0]

	delay();
 80003ae:	f000 f83d 	bl	800042c <delay>

	*p22 &=0XFF3FFFFF;
 80003b2:	687b      	ldr	r3, [r7, #4]
 80003b4:	681b      	ldr	r3, [r3, #0]
 80003b6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80003ba:	687b      	ldr	r3, [r7, #4]
 80003bc:	601a      	str	r2, [r3, #0]
	*p22 |=0X00400000;
 80003be:	687b      	ldr	r3, [r7, #4]
 80003c0:	681b      	ldr	r3, [r3, #0]
 80003c2:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80003c6:	687b      	ldr	r3, [r7, #4]
 80003c8:	601a      	str	r2, [r3, #0]
	*p32 |=0X0800;
 80003ca:	683b      	ldr	r3, [r7, #0]
 80003cc:	681b      	ldr	r3, [r3, #0]
 80003ce:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 80003d2:	683b      	ldr	r3, [r7, #0]
 80003d4:	601a      	str	r2, [r3, #0]

}
 80003d6:	bf00      	nop
 80003d8:	3710      	adds	r7, #16
 80003da:	46bd      	mov	sp, r7
 80003dc:	bd80      	pop	{r7, pc}
 80003de:	bf00      	nop
 80003e0:	48001000 	.word	0x48001000
 80003e4:	48001014 	.word	0x48001014

080003e8 <clear>:
void clear()
{
 80003e8:	b480      	push	{r7}
 80003ea:	b085      	sub	sp, #20
 80003ec:	af00      	add	r7, sp, #0
	uint32_t *p21=(uint32_t*)0X48001000;
 80003ee:	4b0d      	ldr	r3, [pc, #52]	; (8000424 <clear+0x3c>)
 80003f0:	60fb      	str	r3, [r7, #12]
	uint32_t *p31=(uint32_t*)0X48001014;
 80003f2:	4b0d      	ldr	r3, [pc, #52]	; (8000428 <clear+0x40>)
 80003f4:	60bb      	str	r3, [r7, #8]

	uint32_t *p22=(uint32_t*)0X48001000;
 80003f6:	4b0b      	ldr	r3, [pc, #44]	; (8000424 <clear+0x3c>)
 80003f8:	607b      	str	r3, [r7, #4]
	uint32_t *p32=(uint32_t*)0X48001014;
 80003fa:	4b0b      	ldr	r3, [pc, #44]	; (8000428 <clear+0x40>)
 80003fc:	603b      	str	r3, [r7, #0]

	*p21 &=00000000;
 80003fe:	68fb      	ldr	r3, [r7, #12]
 8000400:	2200      	movs	r2, #0
 8000402:	601a      	str	r2, [r3, #0]
	*p31 &=00000000;
 8000404:	68bb      	ldr	r3, [r7, #8]
 8000406:	2200      	movs	r2, #0
 8000408:	601a      	str	r2, [r3, #0]

	*p22 &=00000000;
 800040a:	687b      	ldr	r3, [r7, #4]
 800040c:	2200      	movs	r2, #0
 800040e:	601a      	str	r2, [r3, #0]
	*p32 &=00000000;
 8000410:	683b      	ldr	r3, [r7, #0]
 8000412:	2200      	movs	r2, #0
 8000414:	601a      	str	r2, [r3, #0]

}
 8000416:	bf00      	nop
 8000418:	3714      	adds	r7, #20
 800041a:	46bd      	mov	sp, r7
 800041c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000420:	4770      	bx	lr
 8000422:	bf00      	nop
 8000424:	48001000 	.word	0x48001000
 8000428:	48001014 	.word	0x48001014

0800042c <delay>:
void delay()
{
 800042c:	b480      	push	{r7}
 800042e:	b083      	sub	sp, #12
 8000430:	af00      	add	r7, sp, #0
	int i;
	for(i=3000000;i>=0;i--);
 8000432:	4b07      	ldr	r3, [pc, #28]	; (8000450 <delay+0x24>)
 8000434:	607b      	str	r3, [r7, #4]
 8000436:	e002      	b.n	800043e <delay+0x12>
 8000438:	687b      	ldr	r3, [r7, #4]
 800043a:	3b01      	subs	r3, #1
 800043c:	607b      	str	r3, [r7, #4]
 800043e:	687b      	ldr	r3, [r7, #4]
 8000440:	2b00      	cmp	r3, #0
 8000442:	daf9      	bge.n	8000438 <delay+0xc>
}
 8000444:	bf00      	nop
 8000446:	370c      	adds	r7, #12
 8000448:	46bd      	mov	sp, r7
 800044a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800044e:	4770      	bx	lr
 8000450:	002dc6c0 	.word	0x002dc6c0

08000454 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000454:	480d      	ldr	r0, [pc, #52]	; (800048c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000456:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000458:	480d      	ldr	r0, [pc, #52]	; (8000490 <LoopForever+0x6>)
  ldr r1, =_edata
 800045a:	490e      	ldr	r1, [pc, #56]	; (8000494 <LoopForever+0xa>)
  ldr r2, =_sidata
 800045c:	4a0e      	ldr	r2, [pc, #56]	; (8000498 <LoopForever+0xe>)
  movs r3, #0
 800045e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000460:	e002      	b.n	8000468 <LoopCopyDataInit>

08000462 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000462:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000464:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000466:	3304      	adds	r3, #4

08000468 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000468:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800046a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800046c:	d3f9      	bcc.n	8000462 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800046e:	4a0b      	ldr	r2, [pc, #44]	; (800049c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000470:	4c0b      	ldr	r4, [pc, #44]	; (80004a0 <LoopForever+0x16>)
  movs r3, #0
 8000472:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000474:	e001      	b.n	800047a <LoopFillZerobss>

08000476 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000476:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000478:	3204      	adds	r2, #4

0800047a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800047a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800047c:	d3fb      	bcc.n	8000476 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800047e:	f3af 8000 	nop.w
/* Call static constructors */
  bl __libc_init_array
 8000482:	f000 f811 	bl	80004a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000486:	f7ff fea5 	bl	80001d4 <main>

0800048a <LoopForever>:

LoopForever:
    b LoopForever
 800048a:	e7fe      	b.n	800048a <LoopForever>
  ldr   r0, =_estack
 800048c:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8000490:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000494:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000498:	08000510 	.word	0x08000510
  ldr r2, =_sbss
 800049c:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80004a0:	2000001c 	.word	0x2000001c

080004a4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80004a4:	e7fe      	b.n	80004a4 <ADC1_2_IRQHandler>
	...

080004a8 <__libc_init_array>:
 80004a8:	b570      	push	{r4, r5, r6, lr}
 80004aa:	4e0d      	ldr	r6, [pc, #52]	; (80004e0 <__libc_init_array+0x38>)
 80004ac:	4c0d      	ldr	r4, [pc, #52]	; (80004e4 <__libc_init_array+0x3c>)
 80004ae:	1ba4      	subs	r4, r4, r6
 80004b0:	10a4      	asrs	r4, r4, #2
 80004b2:	2500      	movs	r5, #0
 80004b4:	42a5      	cmp	r5, r4
 80004b6:	d109      	bne.n	80004cc <__libc_init_array+0x24>
 80004b8:	4e0b      	ldr	r6, [pc, #44]	; (80004e8 <__libc_init_array+0x40>)
 80004ba:	4c0c      	ldr	r4, [pc, #48]	; (80004ec <__libc_init_array+0x44>)
 80004bc:	f000 f818 	bl	80004f0 <_init>
 80004c0:	1ba4      	subs	r4, r4, r6
 80004c2:	10a4      	asrs	r4, r4, #2
 80004c4:	2500      	movs	r5, #0
 80004c6:	42a5      	cmp	r5, r4
 80004c8:	d105      	bne.n	80004d6 <__libc_init_array+0x2e>
 80004ca:	bd70      	pop	{r4, r5, r6, pc}
 80004cc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80004d0:	4798      	blx	r3
 80004d2:	3501      	adds	r5, #1
 80004d4:	e7ee      	b.n	80004b4 <__libc_init_array+0xc>
 80004d6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80004da:	4798      	blx	r3
 80004dc:	3501      	adds	r5, #1
 80004de:	e7f2      	b.n	80004c6 <__libc_init_array+0x1e>
 80004e0:	08000508 	.word	0x08000508
 80004e4:	08000508 	.word	0x08000508
 80004e8:	08000508 	.word	0x08000508
 80004ec:	0800050c 	.word	0x0800050c

080004f0 <_init>:
 80004f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004f2:	bf00      	nop
 80004f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80004f6:	bc08      	pop	{r3}
 80004f8:	469e      	mov	lr, r3
 80004fa:	4770      	bx	lr

080004fc <_fini>:
 80004fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004fe:	bf00      	nop
 8000500:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000502:	bc08      	pop	{r3}
 8000504:	469e      	mov	lr, r3
 8000506:	4770      	bx	lr
